--For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL. 

#1. Find the top 10 least liked songs based off of popularity

SELECT Track_name, popularity
FROM BIT_DB.spotifydata
ORDER BY popularity ASC
LIMIT 10;

#2. How many songs had popularity between 90 and 100?

SELECT COUNT(track_name)
FROM BIT_DB.spotifydata
WHERE popularity BETWEEN 90 AND 100;

#3. Find out the average danceability, the average energy and sort them by artist name and track name.

SELECT artist_name, track_name,
AVG(danceability), AVG(energy)
FROM BIT_DB.spotifydata
GROUP BY artist_name, track_name;

#4. What song artist released the longest song and what it the track name?

SELECT MAX(duration_ms), artist_name, track_name
FROM BIT_DB.Spotifydata;


#5. What is the average danceability of the 10 most popular track names?
--First, I found the top 10 most liked songs based off of popularity:
SELECT Track_name, popularity
FROM BIT_DB.spotifydata
ORDER BY popularity DESC
LIMIT 10;
--Then :
SELECT AVG(danceability)
FROM BIT_DB.Spotifydata 
WHERE popularity <= 92;
